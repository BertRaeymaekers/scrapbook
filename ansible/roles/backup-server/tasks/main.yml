---
- name: Making sure we have the needed packages
  become: yes
  apt:
    pkg:
    - acl
    - samba
    - smbclient
    - nfs-kernel-server
    - imagemagick

- name: Making sure we have the backup user
  include_role:
    name: user
  vars:
    name: "{{ backup_user.name }}"
    uid: "{{ backup_user.uid }}"
    group: "{{ backup_user.group | default(backup_user.name) }}"
    gid: "{{ backup_user.gid | default(backup_user.uid) }}"

- name: Make sure we have all people user accounts
  include_role:
    name: user
  vars:
    name: "{{ item.key }}"
    uid: "{{ item.value.uid }}"
    gid: "{{ item.value.gid | default(item.value.uid) }}"
  loop: "{{ people | dict2items }}"

# MOUNT EXTRNAL DRIVE

- name: Making the mount point for the backup drive
  become: yes
  file:
    path: "{{ backup_mountpoint }}"
    state: directory
    mode: 0750

- name: Making sure the backup drive is mounted
  become: yes
  mount:
    src: "{{ backup_device }}"
    path: "{{ backup_mountpoint }}"
    fstype: ext4
    opts: defaults
    passno: 2
    state: mounted

# FILESYSTEM ORGANISATION

- name: Creating the root NFS export directory
  become: yes
  file:
    path: "{{ nfs_export_path }}"
    state: directory
    mode: 0755

- name: Creating user NFS export dirctories
  become: yes
  file:
    path: "{{ nfs_export_path }}/{{ item }}"
    owner: "{{ backup_user.name }}"
    group: "{{ item }}"
    state: directory
    mode: 0750
  loop: "{{ people | list }}"

- name: Make sure there is a sync.sh for each user
  become: yes
  blockinfile:
    path: "{{ nfs_export_path }}/{{ item }}/sync.sh"
    create: yes
    owner: "{{ backup_user.name }}"
    group: "{{ backup_user.group | default(backup_user.name) }}"
    mode: 0744
    marker: "# {mark} ANSIBLE PLAYBOOK BACKUP-SERVER BLOCK"
    insertbefore: BOF
    block: |
      #!/bin/bash

      ps -ef | grep "{{ nfs_export_path }}/{{ item }}" | grep rsync | grep -v grep && echo "There is already an rsync running for {{ nfs_export_path }}/{{ item }}: exiting." && exit

      # The sync commands for specific user machine are below this block.
  loop: "{{ people | list }}"

- name: Creating extra NFS export directories
  become: yes
  file:
    path: "{{ nfs_export_path }}/{{ item }}"
    owner: "{{ backup_user.name }}"
    group: "{{ backup_user.name }}"
    state: directory
    mode: 0755
  loop: "{{ nfs_extra_exports }}"

- name: Creating mirror NFS export directories
  become: yes
  file:
    path: "{{ nfs_export_path }}/mirror"
    owner: "{{ backup_user.name }}"
    group: "{{ backup_user.name }}"
    state: directory
    mode: 0750

# TODO: Makes sure mountpoint/item/item exists

- name: Mount the user specific directories on the backup drive on on export
  become: yes
  mount:
    src: "{{ backup_mountpoint }}/{{ item }}/{{ item }}"
    path: "{{ nfs_export_path }}/{{ item }}"
    fstype: none
    opts: bind
    passno: 0
    state: mounted
  loop: "{{ people | list }}"

- name: Mount the user specific directories on the backup drive on on export
  become: yes
  mount:
    src: "{{ backup_mountpoint }}/{{ item }}"
    path: "{{ nfs_export_path }}/{{ item }}"
    fstype: none
    opts: bind
    passno: 0
    state: mounted
  loop: "{{ nfs_extra_exports }}"

- name: Mount the user specific directories on the backup drive on on export
  become: yes
  mount:
    src: "{{ backup_mountpoint }}"
    path: "{{ nfs_export_path }}/mirror"
    fstype: none
    opts: bind
    passno: 0
    state: mounted

# NFS

- name: Configuring the user NFS exports
  become: yes
  lineinfile:
    path: /etc/exports
    regexp: "^{{ nfs_export_path }}/{{ item }}"
    line: "{{ nfs_export_path }}/{{ item }} {{ nfs_allow_from }}({{ nfs_options }})"
  loop: "{{ people | list }}"
  notify: restart nfs

- name: Configuring the extra NFS exports
  become: yes
  lineinfile:
    path: /etc/exports
    regexp: "^{{ nfs_export_path }}/{{ item }}"
    line: "{{ nfs_export_path }}/{{ item }} {{ nfs_allow_from }}({{ nfs_options }})"
  loop: "{{ nfs_extra_exports }}"
  notify: restart nfs

- name: Configure the general mirror exports
  become: yes
  lineinfile:
    path: /etc/exports
    regexp: "^{{ nfs_export_path }}/mirror"
    line: "{{ nfs_export_path }}/mirror {{ nfs_allow_from }}({{ nfs_options }})"
  notify: restart nfs

- name: Make sure there is a JPEG organiser script
  become: yes
  template:
    src: jpeg_organiser.sh.j2
    dest: "{{ nfs_export_path }}/{{ item }}/jpeg_organiser.sh"
    owner: "{{ backup_user.name }}"
    group: "{{ backup_user.group | default(backup_user.name) }}"
    mode: 0744
  loop: "{{ people | list }}"

# SAMBA

- name: "Make sure SAMBA has all the user config"
  become: yes
  blockinfile:
    path: "/etc/samba/smb.conf"
    marker: "# {mark} ANSIBLE PLAYBOOK USER {{ item }} BLOCK"
    block: |
      [{{ item }}]
        comment = Share of {{ item }}
        path = {{ nfs_export_path }}/{{ item }}
        browseable = yes
        writable = yes
        valid user = {{ item }}
  loop: "{{ people | list }}"
  notify: restart samba

- name: "Make sure SAMBA has all the extra shares"
  become: yes
  blockinfile:
    path: "/etc/samba/smb.conf"
    marker: "# {mark} ANSIBLE PLAYBOOK USER {{ item }} BLOCK"
    block: |
      [{{ item }}]
        read only = yes
        locking = no
        comment = Share of {{ item }}
        path = {{ nfs_export_path }}/{{ item }}
        guest ok = yes
  loop: "{{ nfs_extra_exports }}"
  notify: restart samba
